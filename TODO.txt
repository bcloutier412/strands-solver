1. Build a 2D array representing a strands board. [x]
2. Build AVL Tree from the list of words. [x]
3. Set to store cordinates [x]
4. Algorithm: [x]
    write functions to check letters that are up,down,diagonals, etc.
    some way to save letters to recall back to the last one that we checked stack.
    write recursive function to check letters
5. Edit AVL tree Search function [x]
6. Build Algorithm X/DLX to solve exact cover problem [x]

Building Chrome Extension

Comments: We need to build the Javscript script for the browser, create the python program to find the spangram and the possible words in the matrix.
We need to write the DLX algorithm in C++. We have a runtime_data json file to hold all the data that will be transmitted between the files.

TODO:
1. runtime_data.json (holds data that will be communicated between JS, Py, and C++ files) [x]
2. Script to find the possible words in the 2D matrix -> find_possible_words.py [x]
3. Create MatrixWordFinder class that implements the Dictionary AVL Tree that has methods to find possible words [ ]
4. Rewrite DLX Algorithm in C++ and create a class to run this algorithm

08/10: Decided to create a single main.py function to execute the find_words method and the find_spangrams function. This allows
the use of the single DictionaryAVLTree for both scripts. I will create separate class methods and execute these inside of main

The algorithm for finding spangrams: We are going to create a backtracking algorithm. We will iterate through the edges of the board and try to create a word.
If that words ends at the other edge of the board then we know that it is a possible spangram. If it doesnt then we will check all the cells around it.

g++ -std=c++11 -O3 -march=native -flto -fno-plt -ffast-math -funroll-loops -o my_program main.cpp